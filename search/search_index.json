{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Python project template for data science project \u00b6 This is a repository will list of reusable components for building a python library and using it in data science workflow. Purpose of the project \u00b6 quick start common structure between project packing and distribution of code quick on-boarding","title":"Home"},{"location":"#python-project-template-for-data-science-project","text":"This is a repository will list of reusable components for building a python library and using it in data science workflow.","title":"Python project template for data science project"},{"location":"#purpose-of-the-project","text":"quick start common structure between project packing and distribution of code quick on-boarding","title":"Purpose of the project"},{"location":"env-management/","text":"Using poetry \u00b6 Useful commands \u00b6 curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python - source $HOME/.poetry/env poetry --version poetry self update poetry new project1 cd project1 tree . poetry run pytest poetry add pandas poetry remove pandas poetry add --dev pytest poetry add -D coverage[toml] pytest-cov # --dev & -D same poetry install poetry build poetry publish poetry export - requirements.txt --output requirements.txt poetry use python3.8 Some important information \u00b6 Important files \u00b6 pyproject.toml is the single file for all project related metadata. poetry.lock file is the granular metadata. .pypirc will not work with poetry. config.toml & auth.toml is used for setting up the artifact repository. export POETRY_PYPI_TOKEN_PYPI , export POETRY_HTTP_BAISC_PYPI_USERNAME and export POETRY_HTTP_BAISC_PYPI_PASSWORD can be used for this. Publishing library as artifact to artifact store \u00b6 # config.toml : ~/.config/pypoetry/config.toml [repositories] pypi = {url = \"https://upload.pypi.org/legacy/\"} testpypi = {url = \"https://test.pypi.org/legacy/\"} # auth.toml: ~/.config/pypoetry/auth.toml [http-basic] pypi = {username = \"myuser\", password = \"topsecret\"} testpypi = {username = \"myuser\", password = \"topsecret\"} Check GitHub issue related to this here . # Run dotnet build and package - name: dotnet build and publish run: | dotnet restore dotnet build --configuration '${{ env.BUILD_CONFIGURATION }}' dotnet pack -c '${{ env.BUILD_CONFIGURATION }}' --version-suffix $GITHUB_RUN_ID # Publish the package to Azure Artifacts - name: 'dotnet publish' run: dotnet nuget push --api-key AzureArtifacts bin/Release/*.nupkg Reference: \u00b6 PyBites Python Poetry Training","title":"Using `poetry`"},{"location":"env-management/#using-poetry","text":"","title":"Using poetry"},{"location":"env-management/#useful-commands","text":"curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python - source $HOME/.poetry/env poetry --version poetry self update poetry new project1 cd project1 tree . poetry run pytest poetry add pandas poetry remove pandas poetry add --dev pytest poetry add -D coverage[toml] pytest-cov # --dev & -D same poetry install poetry build poetry publish poetry export - requirements.txt --output requirements.txt poetry use python3.8","title":"Useful commands"},{"location":"env-management/#some-important-information","text":"","title":"Some important information"},{"location":"env-management/#important-files","text":"pyproject.toml is the single file for all project related metadata. poetry.lock file is the granular metadata. .pypirc will not work with poetry. config.toml & auth.toml is used for setting up the artifact repository. export POETRY_PYPI_TOKEN_PYPI , export POETRY_HTTP_BAISC_PYPI_USERNAME and export POETRY_HTTP_BAISC_PYPI_PASSWORD can be used for this.","title":"Important files"},{"location":"env-management/#publishing-library-as-artifact-to-artifact-store","text":"# config.toml : ~/.config/pypoetry/config.toml [repositories] pypi = {url = \"https://upload.pypi.org/legacy/\"} testpypi = {url = \"https://test.pypi.org/legacy/\"} # auth.toml: ~/.config/pypoetry/auth.toml [http-basic] pypi = {username = \"myuser\", password = \"topsecret\"} testpypi = {username = \"myuser\", password = \"topsecret\"} Check GitHub issue related to this here . # Run dotnet build and package - name: dotnet build and publish run: | dotnet restore dotnet build --configuration '${{ env.BUILD_CONFIGURATION }}' dotnet pack -c '${{ env.BUILD_CONFIGURATION }}' --version-suffix $GITHUB_RUN_ID # Publish the package to Azure Artifacts - name: 'dotnet publish' run: dotnet nuget push --api-key AzureArtifacts bin/Release/*.nupkg","title":"Publishing library as artifact to artifact store"},{"location":"env-management/#reference","text":"PyBites Python Poetry Training","title":"Reference:"}]}